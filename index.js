const { Telegraf } = require("telegraf");
const fs = require("fs");
const path = require("path");
const express = require("express");
const fetch = require("node-fetch");

const app = express();

app.get("/", (req, res) => res.send("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
const OWNER_ID = Number(process.env.OWNER_ID);

const TOKEN = process.env.TOKEN;
if (!TOKEN) {
  console.error("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω TOKEN");
  process.exit(1);
}
if (!OWNER_ID) {
  console.error("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω OWNER_ID");
  process.exit(1);
}

const bot = new Telegraf(TOKEN);

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
const adminsFile = path.join(__dirname, "admins.json");
const blacklistFile = path.join(__dirname, "blacklist.json");
const blacklistedAdminsFile = path.join(__dirname, "blacklisted_admins.json");

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
function loadJSON(file) {
  try {
    return JSON.parse(fs.readFileSync(file, "utf8"));
  } catch {
    return [];
  }
}
function saveJSON(file, data) {
  fs.writeFileSync(file, JSON.stringify(data, null, 2));
}

let admins = loadJSON(adminsFile);
let blacklist = loadJSON(blacklistFile);
let blacklistedAdmins = loadJSON(blacklistedAdminsFile);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
function isOwner(id) {
  return id === OWNER_ID;
}

function isAdmin(id) {
  return admins.includes(id) && !blacklistedAdmins.includes(id);
}

function isBlacklisted(id) {
  return blacklist.includes(id);
}

async function resolveUserId(ctx, input) {
  if (!input) return null;
  input = input.trim();
  if (/^\d+$/.test(input)) {
    return Number(input);
  }
  if (input.startsWith("@")) {
    try {
      const user = await ctx.telegram.getChat(input);
      return user.id;
    } catch {
      return null;
    }
  }
  return null;
}

function adminOnly(ctx, next) {
  const id = ctx.from.id;
  if (isOwner(id) || isAdmin(id)) return next();
  ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
}

function ownerOnly(ctx, next) {
  if (isOwner(ctx.from.id)) return next();
  ctx.reply("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.");
}

// –ö–æ–º–∞–Ω–¥—ã

bot.start((ctx) => {
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n` +
      `–Ø –∞–¥–º–∏–Ω-–±–æ—Ç.\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
  );
});

bot.command("help", (ctx) => {
  const helpText = `
–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üëë –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞:
/addadmin <@username|id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
/removeadmin <@username|id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
/admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤

üõ° –ê–¥–º–∏–Ω—ã:
/kick <@username|id> ‚Äî –∫–∏–∫–Ω—É—Ç—å
/ban <@username|id> ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
/ban_temp <@username|id> <1m/1h/1d> ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω
/mute <@username|id> <1m/1h/1d> ‚Äî –º—É—Ç –Ω–∞ –≤—Ä–µ–º—è
/blacklist <@username|id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–°
/unblacklist <@username|id> ‚Äî —É–±—Ä–∞—Ç—å –∏–∑ –ß–°
/blacklist_admin <@username|id> ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞
/unblacklist_admin <@username|id> ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞

/wiki <–∑–∞–ø—Ä–æ—Å> ‚Äî –ø–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
  `;
  ctx.reply(helpText);
});

bot.command("admins", ownerOnly, async (ctx) => {
  if (admins.length === 0) return ctx.reply("–ê–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.");
  let text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n";
  for (const id of admins) {
    try {
      const user = await ctx.telegram.getChat(id);
      text += `- ${user.username ? "@" + user.username : user.first_name || id} (${id})\n`;
    } catch {
      text += `- ID: ${id}\n`;
    }
  }
  ctx.reply(text);
});

bot.command("addadmin", ownerOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length === 0) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin @username –∏–ª–∏ ID");

  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  if (admins.includes(userId)) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.");
  admins.push(userId);
  saveJSON(adminsFile, admins);
  ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.`);
});

bot.command("removeadmin", ownerOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length === 0) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin @username –∏–ª–∏ ID");

  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  if (!admins.includes(userId)) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.");
  admins = admins.filter((id) => id !== userId);
  saveJSON(adminsFile, admins);
  ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.`);
});

bot.command("kick", adminOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length === 0) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /kick @username –∏–ª–∏ ID");

  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  try {
    await ctx.kickChatMember(userId);
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –±—ã–ª –∫–∏–∫–Ω—É—Ç.`);
  } catch (e) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∫–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
});

bot.command("ban", adminOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length === 0) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username –∏–ª–∏ ID");

  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  if (isBlacklisted(userId)) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.");

  blacklist.push(userId);
  saveJSON(blacklistFile, blacklist);

  try {
    await ctx.kickChatMember(userId);
  } catch {}

  ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –∑–∞–±–∞–Ω–µ–Ω (—á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫).`);
});

bot.command("unblacklist", adminOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length === 0) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblacklist @username –∏–ª–∏ ID");

  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  if (!isBlacklisted(userId)) return ctx.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.");

  blacklist = blacklist.filter((id) => id !== userId);
  saveJSON(blacklistFile, blacklist);

  ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.`);
});

bot.command("blacklist_admin", ownerOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length === 0) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /blacklist_admin @username –∏–ª–∏ ID");

  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  if (blacklistedAdmins.includes(userId)) return ctx.reply("–ê–¥–º–∏–Ω —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.");

  blacklistedAdmins.push(userId);
  saveJSON(blacklistedAdminsFile, blacklistedAdmins);

  ctx.reply(`‚úÖ –ê–¥–º–∏–Ω —Å ID ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã).`);
});

bot.command("unblacklist_admin", ownerOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length === 0) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblacklist_admin @username –∏–ª–∏ ID");

  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ê–¥–º–∏–Ω –Ω–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.");

  blacklistedAdmins = blacklistedAdmins.filter((id) => id !== userId);
  saveJSON(blacklistedAdminsFile, blacklistedAdmins);

  ctx.reply(`‚úÖ –ê–¥–º–∏–Ω —Å ID ${userId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
});

bot.command("mute", adminOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length < 2) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute @username|id 10m");

  // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç —Å @username –∏ —Å ID
  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  const duration = parseDuration(args[1]);
  if (!duration) return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–∏–º–µ—Ä: 10m, 1h, 1d)");

  try {
    await ctx.telegram.restrictChatMember(ctx.chat.id, userId, {
      permissions: {
        can_send_messages: false,
        can_send_media_messages: false,
        can_send_polls: false,
        can_send_other_messages: false,
        can_add_web_page_previews: false,
        can_change_info: false,
        can_invite_users: false,
        can_pin_messages: false,
      },
      until_date: Math.floor(Date.now() / 1000) + duration,
    });
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –∑–∞–º—É—á–µ–Ω –Ω–∞ ${args[1]}`);
  } catch (err) {
    console.error(err);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
});

bot.command("ban_temp", adminOnly, async (ctx) => {
  const args = ctx.message.text.split(" ").slice(1);
  if (args.length < 2) return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban_temp @username 1h");

  const userId = await resolveUserId(ctx, args[0]);
  if (!userId) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");

  const duration = parseDuration(args[1]);
  if (!duration) return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–∏–º–µ—Ä: 10m, 1h, 1d)");

  try {
    await ctx.telegram.kickChatMember(ctx.chat.id, userId, {
      until_date: Math.floor(Date.now() / 1000) + duration,
    });
    ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ ${args[1]}`);
  } catch {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
  }
});

function parseDuration(str) {
  const match = str.match(/^(\d+)([mhd])$/);
  if (!match) return null;
  const val = Number(match[1]);
  const unit = match[2];
  switch (unit) {
    case "m":
      return val * 60;
    case "h":
      return val * 60 * 60;
    case "d":
      return val * 60 * 60 * 24;
    default:
      return null;
  }
}

bot.command("wiki", async (ctx) => {
  const query = ctx.message.text.split(" ").slice(1).join(" ");
  if (!query) return ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –í–∏–∫–∏–ø–µ–¥–∏–∏.");

  const url = `https://ru.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(query)}`;
  try {
    const res = await fetch(url);
    if (!res.ok) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –í–∏–∫–∏–ø–µ–¥–∏–∏.");
    const data = await res.json();
    let text = `*${data.title}*\n${data.extract}`;
    if (data.content_urls?.desktop?.page) {
      text += `\n[–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ](${data.content_urls.desktop.page})`;
    }
    ctx.replyWithMarkdown(text);
  } catch {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –í–∏–∫–∏–ø–µ–¥–∏–∏.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ß–°
bot.use((ctx, next) => {
  if (isBlacklisted(ctx.from.id)) {
    return ctx.reply("–í—ã –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.");
  }
  if (isAdmin(ctx.from.id) === false && admins.includes(ctx.from.id)) {
    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –Ω–µ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø
    return ctx.reply("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.");
  }
  return next();
});

bot.launch().then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"));

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
